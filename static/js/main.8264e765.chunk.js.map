{"version":3,"sources":["Components/errorboundary.js","Components/map.js","Components/venuelist.js","App.js","serviceWorker.js","index.js"],"names":["ErrorBoundary","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","react_default","a","createElement","children","error","Component","window","gm_authFailure","alert","process","REACT_APP_googleMapsAPI","MapContainer","mapReady","map","setTimeout","addMarkers","getEventInfo","searchResults","headers","Headers","request","Request","method","fetch","then","res","ok","json","Error","concat","status","events","forEach","result","index","event","city","name","lat","lng","time","host","link","push","catch","err","getResults","onMapClicked","infoWindow","close","allMarkers","marker","setAnimation","onInfoWindowClose","updateQuery","query","_this2","markers","google","maps","InfoWindow","results","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_loop","value","Marker","position","title","animation","infoContent","e","addListener","getAnimation","setContent","open","onMarkerClick","showWindow","_iterator","Symbol","iterator","next","done","return","getMap","errorboundary","dist","aria-label","className","role","initialCenter","onClick","onReady","zoom","GoogleApiWrapper","apiKey","VenueList","venues","htmlFor","id","type","placeholder","onChange","target","venue","key","onListClick","App","input","showingInfoWindow","setState","menuOpen","filterList","clickedPlace","setMarkerVisibility","queryUpperCase","toUpperCase","items","document","querySelectorAll","visiblePlaces","item","innerHTML","indexOf","style","display","changeAmp","replace","trim","placesOnList","find","includes","setVisible","activeMarker","triggerMarkerClick","trigger","mkr","showAllMarkers","color","tabIndex","BurgerMenu","noOverlay","isOpen","width","venuelist","bind","ref","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","ReactDOM","render","src_App_0","getElementById","URL","href","origin","addEventListener","response","contentType","get","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.8264e765.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error) {\n    return { hasError: true };\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Something went wrong with Google Maps API.</h1>;\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary\n","import React, { Component } from 'react';\nimport { Map, GoogleApiWrapper } from 'google-maps-react';\nimport ErrorBoundary from './errorboundary';\n\nwindow.gm_authFailure = ()=>{\n  alert(\"Invalid Google API key. Please check your Google API key\");\n};\n\nconst googleMapsAPI = process.env.REACT_APP_googleMapsAPI;\n\nclass MapContainer extends Component {\n  componentDidMount() {\n    this.getEventInfo();\n  }\n\n  mapReady = (props,map) => {\n    //setTimeout is added to ensure that data from API is available in order to create the markers.\n    setTimeout(() => {\n      this.addMarkers(map);\n    }, 1300);\n  }\n  //fetch event info\n  getEventInfo = () => {\n    let searchResults = [];\n    // JSON store http://myjson.com directly access JSON of meetup info updated with LA info - Heggy\n    const placeSearchUrl = \"https://api.myjson.com/bins/i15h6\"\n    let headers = new Headers();\n    let request = new Request(placeSearchUrl, {\n      method: 'GET',\n      headers\n    });\n\n    fetch(request).then(res => {\n      if (!res.ok) {\n        throw Error (`Request rejected with status code ${res.status}`);\n      } else {\n        return res.json()\n      }}).then(res => {\n      res.events.forEach((result, index)=> {\n        let event = {};\n        event.city = result.city;\n        event.name = result.name;\n        event.lat = result.lat;\n        event.lng = result.lng;\n        event.time = result.time;\n        event.host = result.host;\n        event.link = result.link;\n        searchResults.push(event);\n      });\n    }).catch(err=> {\n      alert(\"Something went wrong.\"+ err);\n    })\n    this.props.getResults(searchResults);\n  }\n\n  addMarkers(map) {\n    let markers = [];\n    const infoWindow = new this.props.google.maps.InfoWindow();\n\n    if(this.props.results){\n      for (let event of this.props.results){\n        const marker = new this.props.google.maps.Marker({\n          position: {lat: event.lat, lng: event.lng},\n          map: map,\n          title: event.name,\n          animation: 2  //Drop\n        });\n        markers.push(marker);\n        const infoContent = `<h4>${event.city}</h4><p>Venue: ${event.name}</p><p>Time: ${event.time}</p><p>Host: ${event.host}</p><a href=${event.link}>Event Page</a>`;\n        ['click', 'mouseover'].forEach(e => {\n          marker.addListener(e, ()=> {\n          if (marker.getAnimation() !== null) {\n            marker.setAnimation(null);\n          } else {\n            marker.setAnimation(1); //Bounce\n          }\n            infoWindow.setContent(infoContent);\n            infoWindow.open(map, marker);\n            this.props.onMarkerClick(event, marker, infoWindow);\n            this.props.showWindow();\n          }, false);\n        });\n        infoWindow.addListener('closeclick', ()=>{\n          marker.setAnimation(null);\n          this.props.onInfoWindowClose();\n        })\n      }\n    }\n    this.props.getMap(markers, infoWindow, map, this.props.google);\n  }\n\n  onMapClicked = ()=>{\n    if(this.props.infoWindow){\n      this.props.infoWindow.close();\n    }\n    this.props.allMarkers.forEach(marker=>{\n      marker.setAnimation(null);\n    }, this.props.onInfoWindowClose)\n    this.props.updateQuery(this.props.query);\n  }\n\n  render() {\n    if(window.google){\n      return (\n        <ErrorBoundary>\n          <Map\n            aria-label=\"map\"\n            className=\"map\"\n            role=\"application\"\n            google={this.props.google}\n            initialCenter={{lat:39.011902, lng:-98.484246}}\n            onClick={this.onMapClicked}\n            onReady={this.mapReady}\n            zoom={4}>\n          </Map>\n        </ErrorBoundary>\n      )\n    } else {\n      return(\n        <div>Error loading Google Maps</div>\n      )\n    }\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: (`AIzaSyB8K2MYqSFftmrT_c8i1yG3uypVsrcutN4`)\n})(MapContainer)\n","import React from 'react';\n\nconst VenueList = (props) => {\n  const venues = props.venues;\n  return (\n    <div>\n    <label className=\"label\" htmlFor=\"searchBox\">Search Box</label>\n      <input\n        id=\"searchBox\"\n        type=\"text\"\n        placeholder=\"Type here to filter locations\"\n        value={props.query}\n        onChange={event => props.updateQuery(event.target.value)}\n      />\n      <ul className=\"venue-list\">\n      { venues && (venues.map((venue, index) =>\n        <li className=\"list-item\" key={index}>\n          <button\n            className=\"item\"\n            name={venue.city}\n            key={index}\n            onClick={event => props.onListClick(venue, index)}>{venue.city}\n          </button>\n        </li>\n      ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default VenueList;\n","import React, { Component } from 'react';\nimport './App.scss';\nimport { slide as Menu } from 'react-burger-menu';\nimport MapContainer from './Components/map'\nimport VenueList from './Components/venuelist'\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeMarker: {},\n      results: null,\n      allMarkers: [],\n      clickedPlace: null,\n      infoWindow: null,\n      map: null,\n      menuOpen: false,\n      placesOnList: \"\",\n      query: \"\",\n      showingInfoWindow: false\n    }\n  }\n\n  updateQuery = (input) => {\n    if(this.state.showingInfoWindow){\n      this.state.infoWindow.close();\n      this.setState({\n        query: input,\n        menuOpen: true\n      }, this.filterList(input));\n    }\n  }\n\n  //when a list item is clicked on, save the item name, show marker for item and hide other markers\n  onListClick = (venue) => {\n    venue = [venue];\n    this.setState({\n      clickedPlace: venue,\n      menuOpen: false\n    })\n    //When setMarkerVisibility runs as a callback in the this.setState function above,\n    //it is still looking at the old this.state.clickedPlace.\n    //Using setTimeout to ensure clickedPlace has been updated.\n    setTimeout(()=> {\n      this.setMarkerVisibility([venue[0]]);\n    }, 100)\n  }\n\n  filterList = (input)=>{\n    const queryUpperCase = input.toUpperCase();\n    const items = document.querySelectorAll(\".item\");\n    let visiblePlaces = [];\n    items.forEach(item => {\n      //if text entered matches item from list, show item. If not, hide the item.\n      //Other possible code: items.filter(item=>{new RegExp(this.state.query,'i').exec(item.innerHTML)})\n      if (item.innerHTML.toUpperCase().indexOf(queryUpperCase) > -1) {\n        item.style.display = \"\";\n        const changeAmp = item.innerHTML.replace(/&amp;/, \"&\");\n        visiblePlaces.push(changeAmp.trim());\n      } else {\n        item.style.display = \"none\";\n      }\n    });\n    this.setState({\n      placesOnList: visiblePlaces\n    }, this.setMarkerVisibility(visiblePlaces))\n  }\n\n  setMarkerVisibility = (venue) => {\n    this.state.allMarkers.find(marker => {\n      //If list item hasn't been clicked, show markers currently visible on list\n      if (venue.includes(marker.title.trim())){\n        return marker.setVisible(true);\n      } else if (this.state.clickedPlace){\n        //If list item is clicked, show corresponding marker\n          if ([venue[0].name].includes(marker.title.trim())){\n            this.setState({\n              activeMarker: marker\n            })\n            return this.triggerMarkerClick();\n          } else {\n            return false\n          }\n      } else {\n        return marker.setVisible(false);\n      }\n    });\n  }\n\n  triggerMarkerClick = ()=> {\n    this.state.google.maps.event.trigger(this.state.activeMarker, 'click');\n  }\n\n  onMarkerClick = (props, marker, infoWindow) => {\n    this.state.allMarkers.forEach((mkr)=>{\n      if(marker.title !== mkr.title){\n        mkr.setAnimation(null);\n      }\n    });\n    this.setState({\n      activeMarker: marker,\n      clickedPlace: props,\n      infoWindow: infoWindow,\n      menuOpen: false,\n      showingInfoWindow: true\n    });\n  }\n\n  onInfoWindowClose = () => {\n    this.setState({\n      activeMarker: {},\n      clickedPlace: null,\n      infoWindow: null,\n      menuOpen: false,\n      showingInfoWindow: false,\n    }, this.showAllMarkers)\n  }\n\n  showAllMarkers = ()=> {\n    this.state.allMarkers.forEach(marker => {\n      marker.setVisible(true);\n    });\n  }\n\n  getMap = (markers, infoWindow, map, google) => {\n    this.setState({\n      allMarkers: markers,\n      infoWindow: infoWindow,\n      map: map,\n      google: google\n    })\n  }\n\n  getResults = (searchResults) => {\n    this.setState({\n      results: searchResults\n    })\n  }\n\n  showWindow = ()=> {\n    this.setState({\n      showingInfoWindow: true\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <nav className=\"App-header\" role=\"navigation\">\n          <header>\n            <p>\n              <span style={{color: \"#3cba54\"}}>G</span>\n              <span style={{color: \"#db3236\"}}>r</span>\n              <span style={{color: \"#f4c20d\"}}>o</span>\n              <span style={{color: \"#4885ed\"}}>w</span>\n              <span> With Google Graduation Events</span>\n            </p>\n            <div tabIndex=\"0\">\n            <Menu noOverlay isOpen={this.state.menuOpen} tabIndex={0}\n              className=\"burger-menu\"\n              width={300} >\n              <VenueList\n                className=\"map-list\"\n                onListClick={this.onListClick}\n                venues={this.state.results}\n                query={this.state.query}\n                updateQuery={this.updateQuery.bind(this)}\n              />\n            </Menu>\n            </div>\n          </header>\n        </nav>\n        <main>\n          <MapContainer\n            ref={\"map\"}\n            className=\"map-wrapper\"\n            results={this.state.results}\n            infoWindow={this.state.infoWindow}\n            allMarkers={this.state.allMarkers}\n            query={this.state.query}\n            getResults={this.getResults}\n            getMap={this.getMap}\n            onInfoWindowClose={this.onInfoWindowClose}\n            onMapClicked={this.onMapClicked}\n            onMarkerClick={this.onMarkerClick}\n            setMarkerVisibility={this.setMarkerVisibility}\n            triggerMarkerClick={this.triggerMarkerClick}\n            updateQuery={this.updateQuery}\n            showWindow={this.showWindow}\n          />\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}